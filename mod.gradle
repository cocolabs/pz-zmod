import java.nio.charset.Charset
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.Path

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        // https://mvnrepository.com/artifact/commons-io/commons-io
        classpath group: 'commons-io', name: 'commons-io', version: '2.8.0'
    }
}
apply plugin: 'java'

def getPathsRelativeToModule(moduleName, srcDirSet) {

    def module = rootDir.toPath().resolve(moduleName)
    def map = new HashMap<String, String>()

    def srcDirs = srcDirSet.srcDirs.stream().withCloseable {
        it.filter({ f -> f.exists() }).collect()
    }
    for (File srcDir : (srcDirs as List<File>))
    {
        Files.walk(srcDir.toPath()).withCloseable
        {
            def paths = it.filter({ Files.isRegularFile(it as Path) }).collect()
            for (Path path : (paths as List<Path>))
            {
                def srcDirPath = srcDir.toPath()
                def relativePath = srcDirPath.relativize(path)
                def srcDirName = module.relativize(srcDirPath)
                map.put(relativePath.toString(), srcDirName.toString())
            }
        }
    }
    return map
}

static def getRelativeCopyPath(fcd, relativePathMap) {

    def path = relativePathMap.get(Paths.get(fcd.path).toString())
    if (path != null) {
        return fcd.relativePath.prepend(path)
    }
    else throw new Exception("Unable to relativize copy path: $fcd.path")
}

task mediaClasses(type: Copy, overwrite: true) {
    includeEmptyDirs = false
    from(sourceSets.media.java.srcDirs) {
        def mSources = getPathsRelativeToModule('media', sourceSets.media.java)
        eachFile {
            def fcd = it as FileCopyDetails
            fcd.setRelativePath(getRelativeCopyPath(fcd, mSources))
        }
    }
    into "$buildDir/classes/java/media"
}

processMediaResources {
    includeEmptyDirs = false
    def mResources = getPathsRelativeToModule('media', sourceSets.media.resources)
    eachFile {
        def fcd = it as FileCopyDetails
        fcd.setRelativePath(getRelativeCopyPath(fcd, mResources))
    }
}

task writeModInfo {
    description('Create and write to mod.info file.')

    List<String> info = Arrays.asList([
        "name=$mod_name",
        "poster=poster.png",
        "description=$mod_desc",
        "id=$rootProject.name",
        "url=$mod_url",
        "modversion=" + rootProject.version,
        "pzversion=$game_version",
    ] as String[])
    def charset = Charset.defaultCharset().name()
    org.apache.commons.io.FileUtils.writeLines(file('mod.info'), charset, info, false)
}
