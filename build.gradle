import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // https://docs.gradle.org/current/userguide/idea_plugin.html
    id 'idea'
}
group 'com.pz'
version '1.0'

repositories {
    jcenter()
}

apply from: 'zomboid.gradle'
apply from: 'mod.gradle'

sourceSets {
    media {
        java.srcDirs = ['media/lua', 'media/scripts']
        resources.srcDirs = ['media/sound', 'media/textures']
    }
}

def getPathsRelativeToModule(moduleName, srcDirSet) {

    def module = rootDir.toPath().resolve(moduleName)
    def map = new HashMap<String, String>()

    def srcDirs = srcDirSet.srcDirs.stream().withCloseable {
        it.filter({ f -> f.exists() }).collect()
    }
    for (File srcDir : (srcDirs as List<File>))
    {
        Files.walk(srcDir.toPath()).withCloseable
                {
                    def paths = it.filter({ Files.isRegularFile(it as java.nio.file.Path) }).collect()
                    for (java.nio.file.Path path : (paths as List<java.nio.file.Path>))
                    {
                        def srcDirPath = srcDir.toPath()
                        def relativePath = srcDirPath.relativize(path)
                        def srcDirName = module.relativize(srcDirPath)
                        map.put(relativePath.toString(), srcDirName.toString())
                    }
                }
    }
    return map
}

static def getRelativeCopyPath(fcd, relativePathMap) {

    def path = relativePathMap.get(Paths.get(fcd.path).toString())
    if (path != null) {
        return fcd.relativePath.prepend(path)
    }
    else throw new Exception("Unable to relativize copy path: $fcd.path")
}

task mediaClasses(type: Copy, overwrite: true) {
    includeEmptyDirs = false
    from(sourceSets.media.java.srcDirs) {
        def mSources = getPathsRelativeToModule('media', sourceSets.media.java)
        eachFile {
            def fcd = it as FileCopyDetails
            fcd.setRelativePath(getRelativeCopyPath(fcd, mSources))
        }
    }
    into "$buildDir/classes/java/media"
}

processMediaResources {
    includeEmptyDirs = false
    def mResources = getPathsRelativeToModule('media', sourceSets.media.resources)
    eachFile {
        def fcd = it as FileCopyDetails
        fcd.setRelativePath(getRelativeCopyPath(fcd, mResources))
    }
}

jar {
    from sourceSets.media.output
}
