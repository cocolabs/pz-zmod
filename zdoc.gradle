import java.nio.charset.StandardCharsets

// directory containing generated lua library
project.ext.zDocLuaDir = file("$buildDir/generated/sources/zdoc/").absoluteFile

repositories {
    // try to find dependencies locally first
    mavenLocal()
}

configurations {
    zomboidDoc.extendsFrom zomboidRuntimeOnly
}
dependencies {
    // https://search.maven.org/artifact/io.github.cocolabs/pz-zdoc
    zomboidDoc 'io.github.cocolabs:pz-zdoc:3.+'

    // ZomboidDoc compiled Lua library
    if (project.ext.has('mod.pzversion')) {
        compileOnly files("lib/zdoc-lua-${project.ext.get('mod.pzversion')}" + '.jar')
    }
    else if (file('mod.info').exists()) {
        logger.warn('WARN: Unable to find mod.pzversion property')
    }
    // Project Zomboid classes
    zomboidDoc files(zomboidClassesDir)
}

tasks.register('zomboidLuaJar', ZDocJar.class) {

    it.archiveBaseName.set('zdoc-lua')
    it.description 'Assembles a jar containing compiled Lua classes.'

    it.from zDocLuaDir
    it.destinationDir file('lib')
}

tasks.register('zomboidVersion', JavaExec.class) {

    it.description 'Read Project Zomboid game version.'
    it.group 'zomboid'

    it.main = 'io.cocolabs.pz.zdoc.Main'
    it.classpath = configurations.zomboidDoc
    it.args 'version'

    OutputStream oStream = new ByteArrayOutputStream()
    it.setStandardOutput(oStream)

    it.doLast {
        // get command output from stream
        def versionText = oStream.toString(StandardCharsets.UTF_8.name()).split('\r\n|\r|\n')

        // ZomboidDoc version
        logger.lifecycle(versionText[0])

        // get version number and classifier (ex. 41.50-IWBUMS)
        project.ext.set('mod.pzversion', versionText[1].substring(12).replaceAll(" ", "").trim())
        logger.lifecycle("game version ${project.ext.get('mod.pzversion')}")
    }
    it.dependsOn(tasks.getByName('zomboidClasses'))
    it.finalizedBy(tasks.getByName('saveModInfo'))
}

def annotateZomboidLua = tasks.register('annotateZomboidLua', JavaExec.class) {

    it.description 'Annotate vanilla Lua with EmmyLua.'
    it.group 'zomboid'

    it.main = 'io.cocolabs.pz.zdoc.Main'
    it.classpath = configurations.zomboidDoc
    it.args('annotate', '-i', "${project.ext.gameDir}/media/lua", '-o', "$zDocLuaDir/media/lua")
    it.dependsOn(tasks.getByName('zomboidClasses'))
}

def compileZomboidLua = tasks.register('compileZomboidLua', JavaExec.class) {

    it.description 'Compile Lua library from modding API.'
    it.group 'zomboid'

    //noinspection GroovyAssignabilityCheck,GroovyAccessibility
    it.javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(8)
    }
    it.main = 'io.cocolabs.pz.zdoc.Main'
    it.classpath = configurations.zomboidDoc
    it.args('compile', '-i', "$gameDir", '-o', "$zDocLuaDir/media/lua/shared/Library")
    it.dependsOn(tasks.getByName('zomboidClasses'))
    it.shouldRunAfter(annotateZomboidLua)
}
