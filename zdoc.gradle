// directory containing generated lua library
project.ext.zDocLuaDir = file("$buildDir/generated/sources/zdoc/").absoluteFile

repositories {
    // try to find dependencies locally first
    mavenLocal()
}
// Github Packages repository credentials
project.ext.cocoLabsRepo = 'pz-zdoc'
apply from: 'https://git.io/JtydE'

configurations {
    zomboidDoc.extendsFrom zomboidRuntimeOnly
    zomboidDoc.extendsFrom zomboidImplementation
}
dependencies {
    // https://github.com/orgs/real-coco-labs/packages?repo_name=pz-zdoc
    zomboidDoc 'io.cocolabs:pz-zdoc:3.+'

    // ZomboidDoc compiled Lua library
    if (project.ext.has('gameVersion')) {
        compileOnly files("lib/zdoc-lua-$gameVersion" + '.jar')
    }
    else logger.warn('WARN: Unable to find gameVersion property')
}

tasks.register('zomboidLuaJar', ZDocJar.class) {

    it.description('Assembles a jar containing compiled lua classes.')
    it.archiveBaseName.set('zdoc-lua')

    it.from zDocLuaDir
    it.destinationDir file('lib')
}

tasks.register('zomboidVersion', JavaExec.class) {

    it.description('Read Project Zomboid game version.')
    it.group('zomboid')

    it.main = 'io.cocolabs.pz.zdoc.Main'
    it.classpath = configurations.zomboidDoc
    it.args 'version'

    OutputStream oStream = new ByteArrayOutputStream()
    it.setStandardOutput(oStream)

    it.doLast {
        // get application command output from stream
        // ex. game version 41.50 - IWBUMS
        def versionText = oStream.toString()

        // get version number and classifier (ex. 41.50-IWBUMS)
        project.ext.gameVersion = versionText.substring(18).replaceAll(" ", "")
        logger.lifecycle("game version: ${project.ext.gameVersion}")
    }
    it.dependsOn(tasks.getByName('zomboidClasses'))
}

tasks.register('annotateZomboidLua', JavaExec.class) {

    it.description('Annotate vanilla Lua with EmmyLua.')
    it.setGroup('zomboid')

    it.main = 'io.cocolabs.pz.zdoc.Main'
    it.classpath = configurations.zomboidDoc
    it.args('annotate', '-i', "${project.ext.gameDir}/media/lua", '-o', "$zDocLuaDir/media/lua")
    it.dependsOn(tasks.getByName('zomboidClasses'))
}

tasks.register('compileZomboidLua', JavaExec.class) {

    it.description('Compile Lua library from modding API.')
    it.setGroup('zomboid')

    it.main = 'io.cocolabs.pz.zdoc.Main'
    it.classpath = configurations.zomboidDoc
    it.args('compile', '-i', "$gameDir", '-o', "$zDocLuaDir/media/lua/shared/Library")
    it.dependsOn(tasks.getByName('zomboidClasses'))
}
