import org.gradle.util.GFileUtils

// directory containing a copy of Project Zomboid classes
project.ext.zomboidClassesDir = file("$buildDir/classes/zomboid").absoluteFile

// directory containing Project Zomboid sources
project.ext.zomboidSourcesDir = file("$buildDir/generated/sources/zomboid").absoluteFile

/**
 * This task will sync zomboidClassesDir with classes found in game install directory.
 * Note that it needs to run before dependencies are declared so that
 * the assembled classes can be included onto the classpath
 */
task zomboidClasses(type: Sync) {
    description 'Assembles zomboid classes.'
    group 'zomboid'
    includeEmptyDirs false
    from project.ext.gameDir
    include '**/*.class', 'stdlib.lbc'
    into zomboidClassesDir
}
classes.dependsOn(zomboidClasses)

configurations {
    runtimeOnly.extendsFrom zomboidRuntimeOnly
    implementation.extendsFrom zomboidImplementation
}
dependencies {
    // Project Zomboid libraries
    zomboidRuntimeOnly fileTree(dir: gameDir, include: ['*.jar'])

    // Project Zomboid classes
    zomboidImplementation files(zomboidClassesDir)
}
/**
 * Decompile game classes with FernFlower using default IDEA settings.
 * Default task behaviour is to decompile all class files found in game root directory.
 *
 * This can be changed by defining specific file to decompile with project property 'src'.
 * example: gradle decompileZomboid -Psrc="<path>"
 */
tasks.register("decompileZomboid", JavaExec.class) {

	description('Decompile Project Zomboid classes.')
	group('zomboid')

    if (project.ext.ideaHome == null) {
        throw new InvalidUserDataException('Local property \"ideaHome\" is not defined')
    }
    it.description('Decompile Project Zomboid classes.')
    it.setGroup('zomboid')

	//noinspection GroovyAssignabilityCheck,GroovyAccessibility
	it.javaLauncher = javaToolchains.launcherFor {
		languageVersion = JavaLanguageVersion.of(11)
	}
    it.classpath files("$ideaHome/plugins/java-decompiler/lib/java-decompiler.jar")
    it.main 'org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler'

    // default parameters used by IDEA compiler
    def params = ['-hdc=0', '-dgs=1', '-rsy=1', '-rbr=1', '-lit=1', '-nls=1', '-mpm=60']

    def srcDir = file("$buildDir/tmp/zomboid")
    if (!srcDir.exists() && !srcDir.mkdirs()) {
        throw new IOException("Unable to create decompile tmp dir")
    }
    // directories containing class files
    String[] sourceDirs = ['astar', 'com', 'de', 'fmod', 'javax', 'org', 'se', 'zombie']
    for (int i = 0; i < sourceDirs.size(); i++)
    {
        def sDir = sourceDirs[i]
        def copyDest = srcDir.toPath().resolve(sDir).toFile()
        def copySrc = gameDir.resolve(sDir).toFile()

        logger.info("copying class package \'${copySrc.name}\'")
		GFileUtils.copyDirectory(copySrc, copyDest)
    }
    gameDir.resolve(project.ext.has('src') ? project.ext.src : 'zombie').toString()

    // decompiler will throw error if destination dir doesn't exist
    zomboidSourcesDir.mkdirs()

    it.args params + srcDir.path + zomboidSourcesDir.path
}

tasks.register('zomboidJar', ZDocJar.class) {
    it.description('Assembles a jar archive containing game classes.')
    it.includeEmptyDirs = false

    it.archiveBaseName.set('zomboid')
    it.from zomboidClassesDir
    it.destinationDir file('lib')
	onlyIf {
		def files = zomboidClassesDir.exists() ? zomboidClassesDir.listFiles() : null
		return files != null && files.size() > 0
	}
}

tasks.register("zomboidSourcesJar", ZDocJar.class) {
    it.description('Assembles a jar containing decompiled game sources.')

    it.archiveBaseName.set('zomboid')
    it.classifier 'sources'
    it.from zomboidSourcesDir
    it.destinationDir file('lib')
	it.onlyIf {
		def files = zomboidSourcesDir.exists() ? zomboidSourcesDir.listFiles() : null
		return files != null && files.size() > 0
	}
}
