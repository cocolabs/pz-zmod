import java.nio.file.Files
import java.nio.file.Paths

Properties properties = new Properties()
def propertiesFile = project.rootProject.file('local.properties')
if (propertiesFile.exists()) {
    properties.load(propertiesFile.newDataInputStream())
}
project.ext.ideaHome = properties.getProperty('idea.home')
project.ext.gameDir = Paths.get(properties.getProperty('game.dir', ''))

if (project.ext.gameDir == null)
{
    if (providers.environmentVariable('GAME_DIR').present) {
        project.ext.gameDir = Paths.get(providers.environmentVariable('GAME_DIR').get())
    }
    else if (System.hasProperty('game.dir')) {
        project.ext.gameDir = Paths.get(System.getProperty('game.dir'))
    }
    else throw new RuntimeException("Game directory path not specified")
}

repositories {
    maven { url 'https://jitpack.io' }
}
configurations {
    zomboid.extendsFrom runtimeOnly
}
dependencies {
    // https://github.com/yooksi/pz-zdoc
    zomboid 'com.github.yooksi:pz-zdoc:master-SNAPSHOT'

    // Project Zomboid libraries
    runtimeOnly fileTree(dir: gameDir, include: ['*.jar'])

    compile files("lib/zomboid-$game_version" + '.jar')
    compile files("lib/zdoc-lua-$game_version" + '.jar')
}

task zomboidJar(type: Jar) {
    description('Assembles a jar archive containing game classes.')

    archiveFileName = "zomboid-${game_version}.jar"
    destinationDir(file("lib"))
    includeEmptyDirs = false

    from project.ext.gameDir

    HashSet<String> excludePaths = new HashSet<>()
    Files.walk(project.ext.gameDir as java.nio.file.Path).filter({
        Files.isRegularFile(it) && !it.getFileName().toString().endsWith('class') &&
                it.getFileName().toString() != "stdlib.lbc"
    }).forEach({ excludePaths.add(gameDir.relativize(it).toString()) })

    setExcludes(excludePaths)
}

/**
 * Decompile game classes with FernFlower using default IDEA settings.
 * Default task behaviour is to decompile all class files found in game root directory.
 *
 * This can be changed by defining specific file to decompile with project property 'src'.
 * example: gradle decompileZomboid -Psrc="<path>"
 */
task decompileZomboid(type: Exec) {
    description('Decompile Project Zomboid classes.')

    def classpath = "$ideaHome/plugins/java-decompiler/lib/java-decompiler.jar"
    def mainClass = 'org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler'

    def sourceDir = gameDir.resolve(project.ext.has('src') ?
            project.ext.get('src') : 'zombie').toString()

    def destinationDir = file('src/main/java')

    // decompiler will throw an error if destination dir doesn't exist
    destinationDir.mkdirs()

    // default parameters used by IDEA compiler
    setCommandLine(['java', '-classpath', classpath, mainClass, '-hdc=0', '-dgs=1', '-rsy=1',
                    '-rbr=1', '-lit=1', '-nls=1', '-mpm=60', sourceDir, destinationDir.path])
}

task zdocJar(type: Jar) {
    description('Assembles a jar containing compiled lua classes.')
    archiveFileName = "zdoc-lua-${game_version}.jar"
    destinationDir(file("lib"))

    from "$buildDir/generated/sources/zdoc/"
}

