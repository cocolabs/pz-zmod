// directory containing a copy of Project Zomboid classes
project.ext.zomboidClassesDir = file("$buildDir/classes/zomboid").absoluteFile

/**
 * This task will sync zomboidClassesDir with classes found in game install directory.
 * Note that it needs to run before dependencies are declared so that
 * the assembled classes can be included onto the classpath
 */
task zomboidClasses(type: Sync) {
    description 'Assembles zomboid classes.'
    group 'zomboid'
    includeEmptyDirs false
    from project.ext.gameDir
    include '**/*.class', 'stdlib.lbc'
    into zomboidClassesDir
}
classes.dependsOn(zomboidClasses)

configurations {
    runtimeOnly.extendsFrom zomboidRuntimeOnly
    implementation.extendsFrom zomboidImplementation
}
dependencies {
    // Project Zomboid libraries
    zomboidRuntimeOnly fileTree(dir: gameDir, include: ['*.jar'])

    // Project Zomboid classes
    zomboidImplementation files(zomboidClassesDir)
}
/**
 * Decompile game classes with FernFlower using default IDEA settings.
 * Default task behaviour is to decompile all class files found in game root directory.
 *
 * This can be changed by defining specific file to decompile with project property 'src'.
 * example: gradle decompileZomboid -Psrc="<path>"
 */
tasks.register("decompileZomboid", Exec.class) {
    if (!project.ext.hasProperty('ideaHome')) {
        throw new InvalidUserDataException('Local property \"ideaHome\" is not defined')
    }
    it.description('Decompile Project Zomboid classes.')
    it.setGroup('zomboid')

    def classpath = "$ideaHome/plugins/java-decompiler/lib/java-decompiler.jar"
    def mainClass = 'org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler'

    // default parameters used by IDEA compiler
    def params = ['-hdc=0', '-dgs=1', '-rsy=1', '-rbr=1', '-lit=1', '-nls=1', '-mpm=60']

    def srcDir = file("$buildDir/tmp/zomboid")
    if (!srcDir.exists() && !srcDir.mkdirs()) {
        throw new IOException("Unable to create decompile tmp dir")
    }
    // directories containing class files
    String[] sourceDirs = ['astar', 'com', 'de', 'fmod', 'javax', 'org', 'se', 'zombie']
    for (int i = 0; i < sourceDirs.size(); i++)
    {
        def sDir = sourceDirs[i]
        def copyDest = srcDir.toPath().resolve(sDir).toFile()
        def copySrc = gameDir.resolve(sDir).toFile()

        logger.info("copying class package \'${copySrc.name}\'")
        //noinspection GroovyAssignabilityCheck
        copyDirectory(copySrc, copyDest)
    }
    gameDir.resolve(project.ext.has('src') ? project.ext.src : 'zombie').toString()
    def destDir = file("$buildDir/generated/sources/zomboid")

    // decompiler will throw error if destination dir doesn't exist
    destDir.mkdirs()

    it.setCommandLine(['java', '-classpath', classpath, mainClass] + params + srcDir.path + destDir.path)
}

def zomboidSourcesJar = tasks.register("zomboidSourcesJar", Jar.class) {
    it.description('Assembles a jar containing decompiled game sources.')
    it.setGroup('zomboid')

    it.archiveFileName = "zomboid-${game_version}-sources.jar"
    it.from "$buildDir/generated/sources/zomboid"
    it.into 'lib'
}
jar.dependsOn(zomboidSourcesJar.get())
